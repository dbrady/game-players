#!/usr/bin/env ruby
# draw-mine - render a Gem Miner 2 mine from its xml resource
#
# draw-mine <filename.xml>
#
# NOTES:
#
# This started as a logging/learning project with no known tiles and only gave
# me general ideas for the map. Now that it's had some time to bake, it's got a
# fairly robust (probably over half) set of known tiles. It's time to clean this
# up and make it be a real program
#
# TODO
# - [ ] Finish all the ore types and their values
# - [ ] Parse teleporters and put them on the map (see s_rain_temple_e3.xml)
# - [ ] Render the legend down the right side of the map (provide cmd-line option
#   to disable it)
# - [ ] Render the map as raw/debug values for those times when I don't know why
#   the map is rendering something incorrectly
# - [ ] Parse insect objects and put them on the map (mosquitoes)
# - [ ] rainforest-007 renders OPEN to the right of the trap but it's actually a
#   ladder
# - [ ] cmd-line args, e.g. debugging, rendering style

require 'nokogiri'
require 'colorize'

def banner *objects, &block
  puts '-' * 80
  objects.each do |object|
    puts object.inspect
  end
  puts yield if block_given?
  puts '-' * 80
end

class Label
  include Comparable
  attr_reader :symbol, :name

  # These constants affect sort order of Labels
  LABEL = 0
  ORE = 1
  UNKNOWN = 2

  def initialize symbol, name
    @symbol, @name = symbol, name
  end

  def ore?
    name =~ /\([\d]+\)$/
  end

  def type
    return UNKNOWN unless name
    ore? ? ORE : LABEL
  end

  def type_name
    case type
    when LABEL then "LABEL"
    when ORE then "ORE"
    when UNKNOWN then "UNKNOWN"
    end
  end

  def <=> other
    if ore? && other.ore?
      value <=> other.value
    else
      [type, name] <=> [other.type, other.name]
    end
  end

  def value
    return 0 unless ore?
    name[/\d+/].to_i
  end

  def to_s
    "%s" % symbol
  end
end

class Legend
  attr_reader :mine, :lines
  def initialize mine
    @mine = mine
    @lines = [
      "Known Geology:",
      *mine.known_geology_legend.values.sort,
      "",
      "Known Ores:",
      *mine.known_ore_legend.values.sort,
      "",
      "Unknown Tiles:",
      *mine.unknown_legend.values.sort
    ]
  end

  # Returns the next line to render for a vertical legend.
  # Given n known tiles and m unknown tiles,
  #
  # Line 0 is always "Known Tiles:"
  # Lines 1..n are the known tiles, sorted by type and name
  # Line n+1 is blank
  # Lines n+2 is always "Unknown Tiles:"
  # Lines n+3..n+3+m are the unknown tiles, sorted by symbol
  def next_line
    @line_enum ||= @lines.each
    begin
      label = @line_enum.next
      if label.respond_to? :name
        "%s: %s" % [label.symbol, label.name]
      else
        label
      end
    rescue StopIteration
      ""
    end
  end
end

class Mine
  attr_reader :doc, :legend, :tileset

  TILESET = [*'0'..'9', *'a'..'z', *'A'..'Z']

  EMPTY = ' '
  IMPASSABLE = '@'
  TELEPORT = '@'
  BOULDER = 'O'
  OPEN_CAVERN = EMPTY.on_light_black
  LIFT = 'L'.white.on_light_black
  MARBLE = IMPASSABLE.white.on_light_yellow

  TRIGGER = '^'.red.on_light_black

  KNOWN_TILES = {
    # XML_TILE_ID => Label.new(SYMBOL.color.on_bgcolor, "Name")
    0 => Label.new(' ', 'Nothing'), # object layer -- nothing here
    1 => Label.new(IMPASSABLE.light_black.on_black, 'Bedrock'),
    2 => Label.new(' '.on_cyan, 'Sky'),
    3 => Label.new('.'.yellow.on_black, "Dirt"),
    5 => Label.new('b'.black.on_yellow, "Amber Beetle"),
    6 => Label.new('m'.black.on_yellow, "Amber Mosquito"),
    7 => Label.new('s'.black.on_yellow, "Amber Scorpion"),
    8 => Label.new(BOULDER.light_white.on_light_black, "Boulder"),
    9 => Label.new(OPEN_CAVERN, "Open"),
    10 => Label.new(BOULDER.light_white.on_light_blue, "Ice Block"),
    12 => Label.new('#'.black.on_yellow, "Sign"),
    14 => Label.new("&".red.on_light_black, "Miner"),
    15 => Label.new("&".cyan.on_light_black, "Miner"),
    16 => Label.new('v'.black.on_light_black, "Bat"),
    17 => Label.new('&'.light_yellow.on_light_black, "Necklace"),
    18 => Label.new(OPEN_CAVERN, "Mushrooms"),
    19 => Label.new(OPEN_CAVERN, "Hanging Vines"),
    20 => Label.new('g'.white.on_black, "Guano (9)"),
    21 => Label.new('v'.yellow.on_black, "Ceramic Vase"),
    25 => Label.new('F'.light_yellow.on_yellow, "Fossilized Claw"),
    27 => Label.new('F'.light_yellow.on_yellow, "Fossilized Vertebra"),
    28 => Label.new('u'.light_green.on_black, "Uranium (32)"),
    29 => Label.new('t'.light_blue.on_black, "Topaz (22)"),
    30 => Label.new('o'.white.on_light_black, "White Opal (19)"),
    33 => Label.new('F'.light_yellow.on_yellow, "Fossilized Triceratops Skull"),
    34 => Label.new('F'.light_yellow.on_yellow, "Fossilized Femur"),
    35 => Label.new('t'.white.on_black, "Tin (7)"),
    38 => Label.new('b'.yellow.on_black, "Bauxite (10)"),
    40 => Label.new('o'.black.on_white, "Black Opal (25)"),
    41 => Label.new('o'.green.on_black, "Green Opal (21)"),
    42 => Label.new('g'.light_black.on_black, "Graphite (12)"),
    43 => Label.new('g'.white.on_yellow, "Gold (37)"),
    45 => Label.new('d'.cyan.on_black, "Diamond (45)"),
    46 => Label.new('P'.light_magenta.on_black, "Porphyry (35)"),
    47 => Label.new('c'.yellow.on_black, "Copper (15)"),
    49 => Label.new('c'.white.on_black, "Coal (6)"),
    51 => Label.new('i'.yellow.on_black, "Iron (14)"),
    52 => Label.new('L'.light_black.on_black, "Lead (12)"),
    53 => Label.new('m'.light_red.on_black, "Manganese (21)"),
    54 => Label.new('a'.light_red.on_black, "Amethyst (28)"),
    55 => Label.new('F'.light_yellow.on_yellow, "Fossil"),
    56 => Label.new(LIFT, "Lift Shaft"),
    57 => Label.new(LIFT.bold, "Lift Car"),
    58 => Label.new(OPEN_CAVERN, "Open (Broken Stalagmite)"),
    59 => Label.new('%'.light_black.on_magenta, "Coal Gas"),
    60 => Label.new(OPEN_CAVERN, "Open (Stalagmite)"),
    61 => Label.new(OPEN_CAVERN, "Open (Stalactite & Stalagmite)"),
    62 => Label.new(OPEN_CAVERN, "Open (Stalactite)"),
    63 => Label.new('|'.light_yellow.on_black, "Support"),
    64 => Label.new('|'.light_yellow.on_light_black, "Support (Charred)"),
    66 => Label.new('.'.light_red.on_black, "Cave-in Dirt"),
    67 => Label.new('#'.light_yellow.on_light_black, "Ladder"),
    68 => Label.new('#'.yellow.on_light_black, "Ladder (Charred)"),
    69 => Label.new(TELEPORT.black.on_cyan, "Teleport (Way Out)"),
    70 => Label.new(TELEPORT.cyan.on_light_black, "Teleport (Intramine)"),
    71 => Label.new("W".white.on_cyan, "Temple Pool"),
    72 => Label.new(OPEN_CAVERN, "Open"),
    73 => Label.new(OPEN_CAVERN, "Open (Torch)"),
    74 => Label.new('|'.yellow.on_red, "Support (Burning)"),
    76 => Label.new('^'.white.on_red, "Cave-In Trap Trigger"),
    77 => Label.new(MARBLE, "Temple Marble"),
    78 => Label.new('#'.yellow.on_red, "Ladder (burning)"),
    79 => Label.new('/'.red.on_light_black, "Lever"),
    81 => Label.new(OPEN_CAVERN, "Open (Ice Stalagmite)"),
    82 => Label.new(OPEN_CAVERN, "Open (Ice Column)"),
    83 => Label.new(OPEN_CAVERN, "Open (Ice Stalactite)"),
    85 => Label.new('#'.red.on_light_black, "Danger Sign"),
    86 => Label.new('>'.black.on_yellow, "Right Arrow Sign"),
    87 => Label.new('<'.black.on_yellow, "Left Arrow Sign"),
    90 => Label.new("|".red.on_light_black, "Door"),
    91 => Label.new("q".white.on_light_black, "Quartz (12)"),
    94 => Label.new('%'.light_yellow.on_yellow, "Scroll"),
    97 => Label.new('d'.magenta.on_light_magenta, "Pink Diamond (50)"),
    98 => Label.new("j".green.on_black, "Jade (24)"),
    99 => Label.new(MARBLE, "Temple Marble"),
    100 => Label.new(MARBLE, "Temple Marble"),
    102 => Label.new('Q'.light_yellow.on_cyan, "Quest Giver"),
    105 => Label.new(OPEN_CAVERN, "Open (Cobweb)"),
    106 => Label.new(LIFT.red, "Lift Car (Broken)"),
    107 => Label.new(OPEN_CAVERN, "Open"),
    108 => Label.new('S'.black.on_light_cyan, "Skull"),
    110 => Label.new('%'.light_yellow.on_yellow, "Map"),
    111 => Label.new('L'.light_yellow.on_red, "Lava"),
    112 => Label.new('Q'.light_yellow.on_cyan, "Quest Giver"),
    113 => Label.new('='.light_yellow.on_light_black, "Bridge"),
    114 => Label.new('='.light_yellow.on_light_black, "Walkway (Charred)"),
    115 => Label.new('Q'.light_yellow.on_cyan, "Quest Giver"),
    120 => Label.new('a'.blue.on_black, "Azurite (8)"),
    122 => Label.new('n'.white.on_black, "Nickel (5)"),
    123 => Label.new('b'.white.on_black, "Borax (11)"),
    124 => Label.new(OPEN_CAVERN, "Open (Foliage)"),
    125 => Label.new(OPEN_CAVERN, "Open (Foliage)"),
    126 => Label.new(OPEN_CAVERN, "Open (Foliage)"),
    127 => Label.new(OPEN_CAVERN, "Open (Foliage)"),
    128 => Label.new(OPEN_CAVERN, "Open (Orchid)"),
    129 => Label.new(OPEN_CAVERN, "Open (Vine)"),
    130 => Label.new(OPEN_CAVERN, "Open"),
    131 => Label.new(OPEN_CAVERN, "Open"),
    132 => Label.new(OPEN_CAVERN, "Open (Foliage)"),
    133 => Label.new(OPEN_CAVERN, "Open (Foliage)"),
    134 => Label.new(MARBLE, "Temple Marble"),
    135 => Label.new(MARBLE, "Temple Marble"),
    136 => Label.new(OPEN_CAVERN, "Open (Light Shaft)"),
    137 => Label.new(OPEN_CAVERN, "Open (Foliage)"),
    138 => Label.new('s'.light_yellow.on_black, "Sulfur (17)"),
    139 => Label.new('#'.light_red.on_black, "Breakable Wall"),
    140 => Label.new(OPEN_CAVERN, "Open (Palm Frond)"),
    141 => Label.new('_'.white.on_red, "Trap Plate"),
    142 => Label.new(OPEN_CAVERN, "Open (Skulls on Spikes)"),
    149 => Label.new('m'.light_magenta.on_black, "Mica (5)"),
    151 => Label.new(OPEN_CAVERN, "Open (Foliage)"),
    153 => Label.new(OPEN_CAVERN, "Open (Foliage)"),
    154 => Label.new('J'.light_green.on_green, "Jade Skull"),
    155 => Label.new('/'.light_yellow.on_black, "TikTok's Spear"),
    158 => Label.new(MARBLE.black, "Temple Marble (Peephole)"),
    160 => Label.new('z'.white.on_black, "Zinc (20)"),
    161 => Label.new(OPEN_CAVERN, "Open (Foliage)"),
    162 => Label.new(OPEN_CAVERN, "Open (Foliage)"),
    165 => Label.new(OPEN_CAVERN, "Open (Foliage)"),
    166 => Label.new(OPEN_CAVERN, "Open (Foliage)"),
    167 => Label.new(OPEN_CAVERN, "Open (Coral)"),
    168 => Label.new('j'.light_green.on_green, "Jade Skull Fragment"),
  }

  # Unmapped objects - These are objects but they do not appear in the objects
  # map. Specifically, they appear as <object name="?"> instead of IDs in the
  # grid of <layer name="objects">.
  #
  # But... what about collisions?
  INSECT = '%'.on_light_black
  UNMAPPED_OBJECTS = {
    :locked_teleport => Label.new(TELEPORT.red.on_black, "Teleporter (Locked)"),
    :mosquito => Label.new(INSECT.light_red, "Mosquito"),
    # Let's not map these as they are harmless. Bees and beetles are quest
    # targets in like ONE map in the rainforest, but other than that they are
    # functionally identical to OPEN_CAVERN. Then again, maybe show them anyway?
    #
    # mosquitos are insect subtype 4 maybe
    # bees are insect subtype 8 maybe

    :bee => Label.new(INSECT.light_yellow, "Bee (10)"),
    :beehive => Label.new('B'.light_yellow.on_light_black, "Beehive"),
    :beetle => Label.new(INSECT.green, "Beetle"),
    :frog => Label.new('f'.green.on_light_black, "Frog"),
    :wheel => Label.new('@'.yellow.on_black, "Puzzle Wheel"),
    :pedestal => Label.new('P'.light_green.on_green, "Jade Pedestal"),
    :miner => Label.new('&'.cyan.on_light_black, "Miner"),
    :harold => Label.new('h'.cyan.on_light_black, "Harold"),
    # <object type="miner"> with <property name="subtype" value="5"> is Harold
    # miner subtype 9 is Dr. Lavinia Stone

    # Harold appears in s_rain_temple_e3.xml
    # Dr. Lavinia Stone appears in s_rain_four.xml
    :lavinia => Label.new('l'.cyan.on_light_black, "Dr. Lavinia Stone"),
  }

  def initialize xml
    @doc = Nokogiri::XML xml
    @legend = {}
    @tileset = TILESET.dup
  end

  def known_tiles
    @known_tiles ||= KNOWN_TILES
  end

  def known_legend
    legend.dup.keep_if {|key, val| known_legend_value? val }
  end

  def known_legend_value? val
    known_tiles.values.include?(val) || UNMAPPED_OBJECTS.values.include?(val)
  end

  def known_geology_legend
    leg = legend.dup.keep_if {|key, val| known_legend_value?(val) && !val.ore? }
    dedup = Hash[leg.map {|tile, label| [label.symbol, [tile, label]]}]
    Hash[
      dedup.map {|symbol, data| data }
    ]
  end

  def known_ore_legend
    legend.dup.keep_if {|key, val| known_legend_value?(val) && val.ore? }
  end

  def unknown_legend
    legend.dup.delete_if {|key, val| known_legend_value? val }
  end


  def self.load file
    Mine.new(File.open(file))
  end

  def height
    map_layers
      .map {|layer| layer["height"] || ""}
      .map {|height| height.to_i }
      .max
  end

  def width
    map_layers
      .map {|layer| layer["width"] || ""}
      .map {|width| width.to_i }
      .max
  end

  def map_layers
    doc.xpath "//map/layer"
  end

  def geologic_layer
    map_layers.find {|layer| layer["name"] == "main" }
  end

  def object_layer
    map_layers.find {|layer| layer["name"] == "objects" }
  end

  def describe_node node
    desc = node.name
    desc += " type: #{node['type']}" if node.name == 'object'
    desc += " (#{node['x']}x#{node['y']})" if node['type'] == 'insect'
    if node["name"]
      desc += ": #{node['name']}"
      if node["value"]
        value = node["value"]
        value = value[0..29] + '...' if value.size > 32
        desc += "='#{value}'"
      end
    end
    desc
  end

  def render
    banner doc.children.size
    banner doc.children.first.name
    render_node doc.children.first
  end

  def render_node node, indent=1
    text = []
    margin = ' ' * indent * 2
    text << "#{margin}#{describe_node(node)}"
    if !node.children.empty?
      node.children.each do |child|
        text.concat render_node(child, indent+1)
      end
    end
    text
  end

  def known_tile? tile
    known_tiles.key?(tile)
  end

  def encoding_for tile
    legend[tile] ||= if known_tile? tile
                       known_tiles[tile]
                     else
                       Label.new(tileset.shift.to_s.white.on_red, "Uknown")
                     end
  end

  def map_data
    @map_data ||= plot!
  end

  def plot!
    map_data = {}
    map_layers.each do |map|
      layer = map["name"]
      map_data[layer] = []
      data = map.xpath("data").children.first
      data.inner_text.each_line.with_index do |row, index|
        row.sub(/,$/, '')
        nums = row.split(/,/).map(&:to_i)
        nums.pop if nums.size == width+1
        next if nums.size != width
        map_data[layer] << nums
      end
    end
    map_data
  end

  def tile_at(x, y)
    # UGH, REFACTOR ME ALREADY - I return the tile at x, y but I *also* lazily
    # update the legend!
    object = map_data["objects"][y][x]
    return object unless object == 0
    map_data["main"][y][x]
  end

  def encode_tiles!
    height.times do |y|
      width.times do |x|
        tile = tile_at x, y
        if tile.is_a? Integer
          display = encoding_for tile
        else
          display = UNMAPPED_OBJECTS[:tile]
        end
      end
    end
  end

  def index_format
    digits = 1 + (Math.log([height, width].max) / Math.log(10)).to_i
    "%#{digits}d"
  end

  def draw_map
    encode_tiles!
    side_legend = Legend.new self
    height.times do |y|
      print "#{index_format}|" % (y-4)
      width.times do |x|
        tile = tile_at x, y
        if tile.is_a? Integer
          display = encoding_for tile
        else
          display = UNMAPPED_OBJECTS[tile]
        end
        print "%s" % display
      end
      puts "|#{index_format}  %s" % [(y-4), side_legend.next_line]
    end

    puts '-' * 80
    puts "Legend:"
    puts "Known Tiles: "
    puts known_legend.invert.map {|key,val| "#{'%s' % key}:#{val}" }.join(', ')
    puts "Unknown Tiles: "
    puts unknown_legend.invert.map {|key,val| "#{'%s' % key}:#{val}" }.join(', ')
    puts '-' * 80

    # debug
    # puts '-' * 80
    # height.times do |y|
    #   print "%2d|" % (y-4)
    #   width.times do |x|
    #     tile = tile_at x, y
    #     print "%3d," % tile
    #   end
    #   puts "|%2d" % (y-4)
    # end
  end
end

if __FILE__==$0
  mine = Mine.load ARGV[0]
  puts "Mine: (#{mine.width}x#{mine.height})"

  mine.draw_map
  #puts mine.render
end
